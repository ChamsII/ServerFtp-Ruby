#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require "socket"
require 'yaml'
require 'open3'
include Socket::Constants

# Volcano FTP contants
BINARY_MODE = 0
ASCII_MODE = 1
MIN_PORT = 1025
MAX_PORT = 65534

def time()
t = Time.now
puts t
0
end

# Volcano FTP class
class VolcanoFtp
 def initialize
    #file of configuration
    if(File.exists?("volcano_config.yml"))
      fileConfig = YAML.load_file('volcano_config.yml')
      if fileConfig['adr_bind'].nil? or
        fileConfig['port'].nil? or
        fileConfig['directory_root'].nil?
        puts "Error ! Parsing configuration file: volcano_config.yml"
        Process.exit!(true)
      end
      # Prepare instance 
      port = fileConfig['port']
      @socket = TCPServer.new("127.0.0.1", port)
      @socket.listen(fileConfig['adr_bind'])
      
      @pids = []
      @nbr_file = 0
      @path_root = fileConfig['directory_root']
      @transfert_type = BINARY_MODE
      @tsocket = nil
      puts "Server ready to listen for clients on port #{port}"
    end
  end
  
  def ftp_argnil(*args)
    @cs.write "501 Syntax error in parameters or arguments"
  end
  
  def ftp_syst(args)
    @cs.write "215 UNIX Type: L8\r\n"
    0
  end

  def ftp_noop(args)
    @cs.write "200 Don't worry my lovely client, I'm here ;)"
    0
  end

  def ftp_502(*args)
    puts "Command not found"
    @cs.write "502 Command not implemented\r\n"
    0
  end

  def ftp_pwd(args)
    @cs.write "257 " + Dir.getwd + "\r\n"
    0
  end

  def ftp_cwd(args)
    if (args.nil?)
      ftp_argnil(args)
      ftp_pwd(args)
    else
      begin
        Open3.popen3("pwd", args){|i,o,e,t|
          p o.read.chomp
        }
        @cs.write "200 dir changed to #{Dir.pwd}\r\n"
      rescue
        @cs.write "550 Failed to change dir.\r\n"
      end
      0
    end
  end
  
  def ftp_exit(args)
    @cs.write "221 Thank you for using Volcano FTP\r\n"
    -1
  end

  def time(args)
      t = Time.now
      0
  end  
  
  def run
    while (42)
      selectResult = IO.select([@socket], nil, nil, 0.1)
      if selectResult == nil or selectResult[0].include?(@socket) == false
        @pids.each do |pid|
          if not Process.waitpid(pid, Process::WNOHANG).nil?
            ####
            # Do stuff with newly terminated processes here

            ####
            @pids.delete(pid)
          end
        end
        p @pids
      else
        @cs,  = @socket.accept
        peeraddr = @cs.peeraddr.dup
      #  @pids << Kernel.CreatThread do
          puts "[#{Process.pid}] Instanciating connection from #{@cs.peeraddr[2]}:#{@cs.peeraddr[1]}"
          @cs.write "220-\r\n\r\n Welcome to Volcano FTP server !\r\n\r\n220 Connected\r\n"
          while not (line = @cs.gets).nil?
           # puts "[#{Process.pid}] Client sent : --#{line}--"
            ####
            ftp_cwd(line)
            ####
          end
          puts "[#{Process.pid}] Killing connection from #{peeraddr[2]}:#{peeraddr[1]}"
          @cs.close
          Kernel.exit!
        #end
      end
    end
  end

protected

  # Protected methods go here

end

# Main

#if ARGV[0]
  begin
    ftp = VolcanoFtp.new
    ftp.run
  rescue SystemExit, Interrupt
    puts "Caught CTRL+C, exiting"
  rescue RuntimeError => e
    puts e
  end
#end
